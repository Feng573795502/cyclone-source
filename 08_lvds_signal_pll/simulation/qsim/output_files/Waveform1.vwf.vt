// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/08/2018 16:26:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          low_trans_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module low_trans_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] datarx;
reg lock_n;
reg recover_clk;
reg sysclk;
// wires                                               
wire [9:0] datatx;
wire refclk;
wire snd_clk;

// assign statements (if any)                          
low_trans_test i1 (
// port map - connection between master ports and signals/registers   
	.datarx(datarx),
	.datatx(datatx),
	.lock_n(lock_n),
	.recover_clk(recover_clk),
	.refclk(refclk),
	.snd_clk(snd_clk),
	.sysclk(sysclk)
);
initial 
begin 
#5000000 $stop;
end 
// datarx[ 9 ]
initial
begin
	datarx[9] = 1'b0;
end 
// datarx[ 8 ]
initial
begin
	datarx[8] = 1'b0;
end 
// datarx[ 7 ]
initial
begin
	datarx[7] = 1'b0;
end 
// datarx[ 6 ]
initial
begin
	datarx[6] = 1'b0;
	datarx[6] = #3840000 1'b1;
end 
// datarx[ 5 ]
initial
begin
	datarx[5] = 1'b0;
	datarx[5] = #1920000 1'b1;
	datarx[5] = #1920000 1'b0;
end 
// datarx[ 4 ]
initial
begin
	repeat(2)
	begin
		datarx[4] = 1'b0;
		datarx[4] = #960000 1'b1;
		# 960000;
	end
	datarx[4] = 1'b0;
	datarx[4] = #960000 1'b1;
end 
// datarx[ 3 ]
initial
begin
	repeat(5)
	begin
		datarx[3] = 1'b0;
		datarx[3] = #480000 1'b1;
		# 480000;
	end
	datarx[3] = 1'b0;
end 
// datarx[ 2 ]
initial
begin
	repeat(10)
	begin
		datarx[2] = 1'b0;
		datarx[2] = #240000 1'b1;
		# 240000;
	end
	datarx[2] = 1'b0;
end 
// datarx[ 1 ]
initial
begin
	repeat(20)
	begin
		datarx[1] = 1'b0;
		datarx[1] = #120000 1'b1;
		# 120000;
	end
	datarx[1] = 1'b0;
	datarx[1] = #120000 1'b1;
end 
// datarx[ 0 ]
initial
begin
	repeat(41)
	begin
		datarx[0] = 1'b0;
		datarx[0] = #60000 1'b1;
		# 60000;
	end
	datarx[0] = 1'b0;
	datarx[0] = #60000 1'b1;
end 

// sysclk
initial
begin
	repeat(83)
	begin
		sysclk = 1'b0;
		sysclk = #30000 1'b1;
		# 30000;
	end
	sysclk = 1'b0;
end 
endmodule

